server:
#  port: 0 # Assign port number automatically, useful when multiple instances are to be created.
  port: ${PORT:0} # if PORT passed as command line argument when starting the app or else 0

spring:
  application:
    name: users-ws
  devtools:
    restart:
      # For this app to automatically restart and redeploy when we make a change in Java code.
      enabled: true
  datasource:
    # h2 in-memory database configuration
    url: jdbc:h2:~/test
    driverClassName: org.h2.Driver
    username: sa
    password:
  jpa:
    database-platform: org.hibernate.dialect.H2Dialect
  h2:
    console:
      enabled: true # enable H2 console accessed via browser
      settings:
        # h2 db firewall built-in and because we are going to connect to users microservice
        # through the Spring Cloud API Gateway, we need to enable connections from other addresses.
        web-allow-others: true

eureka:
  instance:
    # instance-id has to be unique to register multiple instances of same service in eureka.
    # spring.application.name = users-ws is configured above and spring.application.instance_id
    # if passed as command line argument when starting the app or else a random value.
    instance-id: ${spring.application.name}:${spring.application.instance_id:${random.value}}
  client:
    # Fully qualified url by which Eureka clients communicate with Eureka Server.
    serviceUrl:
      defaultZone: http://localhost:8010/eureka

gateway:
  ip: 10.5.128.97

token:
  expiration: 864000000 # milliseconds, 864000000 ms = 10 days
  secret: aa33caa30d07402ba60ef9c6145ba7e81sdasdajbsd # Random alphanumeric chars for now

login:
  path: /users/login