server:
#  port: 0 # Assign port number automatically, useful when multiple instances are to be created.
  port: ${PORT:0} # if PORT passed as command line argument when starting the app or else 0

spring:
  application:
    name: users-ws
  devtools:
    restart:
      # For this app to automatically restart and redeploy when we make a change in Java code.
      enabled: true
  datasource:
    # h2 in-memory database configuration
    url: jdbc:h2:~/test
    driverClassName: org.h2.Driver
    username: sa
    password:
  jpa:
    database-platform: org.hibernate.dialect.H2Dialect
  h2:
    console:
      enabled: true # enable H2 console accessed via browser
      settings:
        # h2 db firewall built-in and because we are going to connect to users microservice
        # through the Spring Cloud API Gateway, we need to enable connections from other addresses.
        web-allow-others: true

#  configure microservice as client of the spring cloud config server
  config:
    import: optional:configserver:http://localhost:8012

#  Rabbit MQ connection details from Spring Cloud Bus - Dynamic Config Updates
  rabbitmq:
    host: localhost
    port: 5672
    username: guest
    password: guest

# Sleuth and Zipkin
  zipkin:
    base-url: http://localhost:9411
    sender:
      type: web
  sleuth:
    sampler:
      probability: 1

eureka:
  instance:
    # instance-id has to be unique to register multiple instances of same service in eureka.
    # spring.application.name = users-ws is configured above and spring.application.instance_id
    # if passed as command line argument when starting the app or else a random value.
    instance-id: ${spring.application.name}:${spring.application.instance_id:${random.value}}
  client:
    # Fully qualified url by which Eureka clients communicate with Eureka Server.
    serviceUrl:
      defaultZone: http://localhost:8010/eureka

# expose spring boot actuator endpoints
management:
  endpoints:
    web:
      exposure:
        include: health,circuitbreakerevents
  endpoint:
    health:
      enabled: true
      show-details: always
  health:
    circuitbreakers:
      enabled: true

gateway:
  ip: 10.5.128.97

token:
  expiration: 86400000 # milliseconds, 86400000 ms = 1 days
  secret: aa33caa30d07402ba60ef9c6145ba7e81sdasdajbsd # Random alphanumeric chars for now

login:
  path: /users/login

# Enable HTTP Requests Logging in Feign Client
logging:
  level:
    com:
      learn:
        photoapp:
          users:
            feign:
              AlbumsServiceClient: DEBUG

resilience4j:
  circuitbreaker:
    instances:
      albums-ws-cb:
        failure-rate-threshold: 50
        automatic-transition-from-open-to-half-open-enabled: true
        wait-duration-in-open-state: 10s
        sliding-window-type: COUNT_BASED
        sliding-window-size: 2
        minimum-number-of-calls: 1
        event-consumer-buffer-size: 10
    circuit-breaker-aspect-order: 1

  retry:
    retry-aspect-order: 2 # high value here means high priority
    instances:
      albums-ws-retry:
        max-attempts: 3
        wait-duration: 2s
        enable-exponential-backoff: true
        exponential-backoff-multiplier: 5